# models are in memory data structures. inbound/outbound API data
# you should probably NOT have any sql imports/includes here.
# this allows the over-the-wire API to differ from the database schema.

# generated by fastapi-codegen:
#   filename:  Data.Exchange.and.Interoperability/hmis-spec-v1.0.yml
#   timestamp: 2024-08-07T20:04:49+00:00

from __future__ import annotations

from datetime import date
from typing import Any, Dict, List, Optional

from pydantic import (
    AwareDatetime,
    BaseModel,
    EmailStr,
    Field,
    RootModel,
    conint,
    constr,
)


class ClientSummaryQuery(BaseModel):
    FirstName: Optional[constr(max_length=50)] = Field(
        None,
        description='First name of the client (for Query optional and may be a prefix partial)',
    )
    LastName: Optional[constr(max_length=50)] = Field(
        None,
        description='Last name of the client (for Query optional and may be a prefix partial)',
    )
    NameSuffix: Optional[constr(max_length=50)] = Field(
        None,
        description="Suffix of the client's name (for Query optional and may be a prefix partial)",
    )
    DateOfBirth: Optional[date] = Field(
        None,
        description='Optional date of birth of client. A date in ISO 8601 format. The year is always required, the month + day is optional.',
    )
    SocialSecurityNumber: Optional[constr(pattern=r'^[0-9]{4}$')] = Field(
        None,
        description='Social Security Number, should be formatted as 4 characters representing the last 4 digit',
    )
    offset: Optional[int] = Field(None, description='the offset for the next page')
    limit: Optional[int] = Field(
        None, description='the same as the above limit, for consistency'
    )


class ClientSummary(BaseModel):
    FirstName: Optional[constr(max_length=50)] = Field(
        None,
        description='First name of the client (for Query optional and may be a prefix partial)',
    )
    LastName: Optional[constr(max_length=50)] = Field(
        None,
        description='Last name of the client (for Query optional and may be a prefix partial)',
    )
    NameSuffix: Optional[constr(max_length=50)] = Field(
        None,
        description="Suffix of the client's name (for Query optional and may be a prefix partial)",
    )
    PersonalID: constr(max_length=32) = Field(
        ..., description='Unique identifier for the client'
    )
    DateOfBirth: date = Field(
        ...,
        description='Optional date of birth of client. A date in ISO 8601 format. The year is always required, the month + day is optional.',
    )
    SocialSecurityNumber: constr(pattern=r'^[0-9]{4}$') = Field(
        ...,
        description='Social Security Number, should be formatted as 4 characters representing the last 4 digit',
    )


class ClientSummaryResponse(BaseModel):
    query: Optional[Dict[str, Any]] = None
    result: Optional[List[ClientSummary]] = None
    total: Optional[int] = None


class EnrollmentSummary(BaseModel):
    PersonalID: Optional[constr(max_length=32)] = Field(
        None, description='Unique identifier for the client'
    )
    EnrollmentID: Optional[constr(max_length=32)] = Field(
        None, description='Unique identifier for an enrollment'
    )
    ProjectName: Optional[constr(max_length=200)] = Field(
        None, description='ProjectName comes from the Project table'
    )
    ProjectCommonName: Optional[constr(max_length=200)] = None
    EntryDate: Optional[date] = None
    ExitDate: Optional[date] = None


class EnrollmentSummaryResponse(BaseModel):
    query: Optional[Dict[str, Any]] = None
    result: Optional[List[EnrollmentSummary]] = None
    total: Optional[int] = None


class ExitSummary(BaseModel):
    ExitID: Optional[constr(max_length=32)] = Field(
        None, description='Unique identifier'
    )
    EnrollmentID: Optional[constr(max_length=32)] = Field(
        None, description='Enrollment Id'
    )
    PersonalID: Optional[constr(max_length=32)] = Field(
        None, description='Unique identifier for the client'
    )
    EntryDate: Optional[date] = None
    ExitDate: Optional[date] = None


class ExitSummaryResponse(BaseModel):
    query: Optional[Dict[str, Any]] = None
    result: Optional[List[ExitSummary]] = None
    total: Optional[int] = None


class OrganizationSummaryQuery(BaseModel):
    OrganizationName: Optional[constr(max_length=200)] = Field(
        None,
        description='Organization name (for Query optional and may be a prefix partial)',
    )
    OrganizationCommonName: Optional[constr(max_length=200)] = Field(
        None,
        description='Organization common name (for Query optional and may be a prefix partial)',
    )


class OrganizationSummary(OrganizationSummaryQuery):
    OrganizationID: constr(max_length=32)
    OrganizationCommonName: constr(max_length=200) = Field(
        ...,
        description='Organization common name (for Query optional and may be a prefix partial)',
    )


class OrganizationSummaryResponse(BaseModel):
    query: Optional[Dict[str, Any]] = None
    result: Optional[List[OrganizationSummary]] = None
    total: Optional[int] = None


class ProjectSummaryQuery(BaseModel):
    OrganizationID: Optional[constr(max_length=32)] = None
    OrganizationName: Optional[constr(max_length=200)] = None
    ProjectName: Optional[constr(max_length=200)] = None
    ProjectCommonName: Optional[constr(max_length=200)] = None
    OperatingStartDate: Optional[date] = None
    OperatingEndDate: Optional[date] = None


class ProjectSummary(ProjectSummaryQuery):
    ProjectID: constr(max_length=32)
    ProjectName: constr(max_length=200)
    ProjectCommonName: constr(max_length=200)
    OperatingStartDate: date
    OperatingEndDate: date
    OrganizationID: constr(max_length=32)


class ProjectSummaryResponse(BaseModel):
    query: Optional[Dict[str, Any]] = None
    result: Optional[List[ProjectSummary]] = None
    total: Optional[int] = None


class UserBase(BaseModel):
    UserId: constr(max_length=32)
    UserFirstName: Optional[constr(max_length=50)] = None
    UserLastName: Optional[constr(max_length=50)] = None
    UserPhone: Optional[
        constr(pattern=r'^[2-9][0-9]{2}[2-9][0-9]{2}[0-9]{4}$', max_length=10)
    ] = None
    UserExtension: Optional[constr(pattern=r'^[0-9]{1,5}$', max_length=5)] = None
    UserEmail: Optional[EmailStr] = None


class User(BaseModel):
    DateCreated: Optional[AwareDatetime] = None
    DateUpdated: Optional[AwareDatetime] = None
    DateDeleted: Optional[AwareDatetime] = None


class NameDataQuality(RootModel[int]):
    root: int = Field(
        ..., description='Indicates the data quality of the reported name.'
    )


class SocialSecurityNumberDataQuality(RootModel[int]):
    root: int = Field(
        ...,
        description='Indicates the data quality of the reported Social Security Number.',
    )


class DateOfBirthDataQuality(RootModel[int]):
    root: int = Field(
        ..., description='Indicates the data quality of the reported date of birth.'
    )


class RelationshipToHoH(RootModel[int]):
    root: int = Field(
        ..., description="Defines the client's relationship to the Head of Household."
    )


class LivingSituation(RootModel[int]):
    root: int = Field(..., description='Enumerates types of living situations.')


class PercentAMI(RootModel[int]):
    root: int = Field(
        ...,
        description="Percentage of Area Median Income (AMI) that the client's income falls into.",
    )


class VAMCStationNumber(RootModel[str]):
    root: str = Field(
        ...,
        description='VA Medical Center Station Numbers with corresponding facility names.',
    )


class RentalSubsidyTypes(RootModel[int]):
    root: int = Field(
        ..., description='Specifies the type of rental subsidy provided to the client.'
    )


class LengthOfStay(RootModel[int]):
    root: int = Field(..., description="Indicates the length of the client's stay.")


class TimesHomelessPastThreeYears(RootModel[int]):
    root: int = Field(
        ...,
        description='Number of times the client has been homeless in the past three years.',
    )


class MonthsHomelessPastThreeYears(RootModel[int]):
    root: int = Field(
        ...,
        description='Total months the client has been homeless in the past three years.',
    )


class ReasonNotEnrolled(RootModel[int]):
    root: int = Field(
        ..., description='Reasons why a client was not enrolled in the PATH program.'
    )


class ReferralSource(RootModel[int]):
    root: int = Field(..., description='Sources from which referrals are received.')


class ReasonNoServices(RootModel[int]):
    root: int = Field(..., description='Reasons for not providing services.')


class SexualOrientation(RootModel[int]):
    root: int = Field(..., description='Sexual orientation of the client.')


class RHYNumberofYears(RootModel[int]):
    root: int = Field(
        ..., description='Years formerly a ward of Child Welfare or Foster Care Agency.'
    )


class TimeToHousingLoss(RootModel[int]):
    root: int = Field(..., description='Time remaining before housing loss occurs.')


class AnnualPercentAMI(RootModel[int]):
    root: int = Field(
        ..., description='Percentage of Area Median Income (AMI) for the household.'
    )


class LiteralHomelessHistory(RootModel[int]):
    root: int = Field(..., description='History of literal homelessness.')


class EvictionHistory(RootModel[int]):
    root: int = Field(
        ..., description='History of rental evictions for the individual.'
    )


class IncarceratedAdult(RootModel[int]):
    root: int = Field(
        ..., description='Incarcerated as adult (any adult in household).'
    )


class DependentUnder6(RootModel[int]):
    root: int = Field(
        ...,
        description='Presence and age of youngest child under six years in the household.',
    )


class HousingAssessmentAtExit(RootModel[int]):
    root: int = Field(
        ..., description='Assessment of housing situation at the time of project exit.'
    )


class SubsidyInformation(RootModel[int]):
    root: int = Field(
        ...,
        description='Type of subsidy or financial assistance the client has at project exit.',
    )


class ProjectCompletionStatus(RootModel[int]):
    root: int = Field(..., description='Completion status of the project.')


class ExpelledReason(RootModel[int]):
    root: int = Field(..., description='Reasons for expulsion from the project.')


class CountExchangeForSex(RootModel[int]):
    root: int = Field(..., description='How may times ever received anything for sex.')


class WorkerResponse(RootModel[int]):
    root: int = Field(..., description="Worker's response to a query or situation.")


class AftercareProvided(RootModel[int]):
    root: int = Field(
        ...,
        description='Specifies if aftercare was provided following service completion.',
    )


class CMExitReason(RootModel[int]):
    root: int = Field(..., description='Reasons for exiting case management.')


class FundingSource(RootModel[int]):
    root: int = Field(
        ...,
        description='Specifies the source of funding for housing and services projects.',
    )


class ProjectType(RootModel[int]):
    root: int = Field(
        ..., description='Defines the type of housing or service project.'
    )


class RRHSubType(RootModel[int]):
    root: int = Field(..., description='Subtypes for Rapid Re-Housing projects.')


class HousingType(RootModel[int]):
    root: int = Field(..., description='Specifies the type of housing configuration.')


class TargetPopulation(RootModel[int]):
    root: int = Field(
        ..., description='Identifies the target population for the project.'
    )


class HOPWAMedAssistedLivingFacNum(RootModel[int]):
    root: int = Field(
        ...,
        description='Defines whether a project is a HOPWA-funded medical assisted living facility.',
    )


class MilitaryBranch(RootModel[int]):
    root: int = Field(..., description='Branch of military service.')


class DischargeStatus(RootModel[int]):
    root: int = Field(..., description='Military discharge status.')


class NoYes(RootModel[int]):
    root: int = Field(..., description='Indicates a simple binary choice.')


class NoYesMissing(RootModel[int]):
    root: int = Field(
        ..., description='A basic boolean with an additional option for missing data.'
    )


class NoYesReasonsForMissingData(RootModel[int]):
    root: int = Field(..., description='Boolean with reasons for missing data.')


class RaceGenderNone(RootModel[int]):
    root: int = Field(
        ..., description='Indicates if race or gender data is not specified.'
    )


class MissingDataQuality(RootModel[int]):
    root: int = Field(
        ...,
        description="Factored out the [Client Doesn't Know], [Client perfers not to answer], and [data not collected]\nThe intention is to limit the number of lists that we define throughout the API reference.\n",
    )


class Next(BaseModel):
    offset: Optional[float] = Field(None, description='the offset for the next page')
    limit: Optional[float] = Field(
        None, description='the same as the above limit, for consistency'
    )
    url: Optional[str] = Field(
        None,
        description='the assembled url for the next page,\nwith query parameters already included.\n',
    )


class Pagination(BaseModel):
    total: Optional[int] = Field(
        None, description='total number of results for the query'
    )
    limit: Optional[int] = None
    offset: Optional[int] = Field(None, description='the starting point for this')
    next: Optional[Next] = Field(
        None,
        description='fields for the next page, if any.\nNull if this is the last page.\n',
    )


class PaginatedList(BaseModel):
    items: Optional[List[Dict[str, Any]]] = None
    field_pagination: Optional[Pagination] = Field(None, alias='_pagination')


class ErrorCodes(RootModel[str]):
    root: str = Field(
        ..., description='Enumeration of all error conditions returned by queries.'
    )


class ErrorResponse(BaseModel):
    msg: str = Field(..., description='A detailed error message.', title='Msg')
    error_code: ErrorCodes = Field(
        ..., description='The short string of the error', title='Error Code'
    )


class ClientsummaryPostResponse(RootModel[List[ClientSummaryResponse]]):
    root: List[ClientSummaryResponse]


class EnrollmentsummaryPersonalIDGetResponse(EnrollmentSummaryResponse, PaginatedList):
    pass


class ExitsummaryPersonalIDGetResponse(ExitSummaryResponse, PaginatedList):
    pass


class OrganizationsummaryGetResponse(RootModel[List[OrganizationSummaryResponse]]):
    root: List[OrganizationSummaryResponse]


class ProjectsummaryGetResponse(RootModel[List[ProjectSummaryResponse]]):
    root: List[ProjectSummaryResponse]


class CEParticipationBase(BaseModel):
    CEParticipationID: Optional[constr(max_length=32)] = Field(
        None, description='Unique identifier'
    )
    ProjectID: Optional[constr(max_length=32)] = Field(
        None, description='Must match a ProjectID in Projects'
    )
    AccessPoint: Optional[NoYes] = Field(None, description='Access point')
    PreventionAssessment: Optional[NoYes] = Field(
        None, description='Prevention assessment'
    )
    CrisisAssessment: Optional[NoYes] = Field(None, description='Crisis assessment')
    HousingAssessment: Optional[NoYes] = Field(None, description='Housing assessment')
    DirectServices: Optional[NoYes] = Field(None, description='Direct services')
    ReceivesReferrals: Optional[NoYes] = Field(None, description='Receives referrals')
    CeParticipationStatusStartDate: Optional[date] = Field(
        None, description='CEParticipation status start date'
    )
    CeParticipationStatusEndDate: Optional[date] = Field(
        None, description='CEParticipation status end date'
    )


class CEParticipation(CEParticipationBase):
    CEParticipationID: Optional[constr(max_length=32)] = Field(
        None, description='Unique identifier'
    )
    DateCreated: Optional[AwareDatetime] = Field(None, description='Date created')
    DateUpdated: Optional[AwareDatetime] = Field(None, description='Date updated')
    UserId: Optional[constr(max_length=32)] = Field(None, description='User ID')


class CEParticipationQuery(BaseModel):
    CEParticipationID: Optional[constr(max_length=32)] = Field(
        None, description='Unique identifier'
    )
    ProjectID: Optional[constr(max_length=32)] = Field(
        None, description='Must match a ProjectID in Projects'
    )
    AccessPoint: Optional[NoYes] = Field(None, description='Access point')
    DirectServices: Optional[NoYes] = Field(None, description='Direct services')
    ReceivesReferrals: Optional[NoYes] = Field(None, description='Receives referrals')
    CeParticipationStatusStartDate: Optional[date] = Field(
        None, description='CEParticipation status start date'
    )
    CeParticipationStatusEndDate: Optional[date] = Field(
        None, description='CEParticipation status end date'
    )


class CEParticipationSummary(CEParticipationQuery):
    CEParticipationID: constr(max_length=32) = Field(
        ..., description='Unique identifier for the CEParticipation status'
    )
    ProjectID: constr(max_length=32) = Field(
        ..., description='Must match a ProjectID in Projects'
    )
    CeParticipationStatusStartDate: date = Field(
        ..., description='CEParticipation status start date'
    )
    CeParticipationStatusEndDate: date = Field(
        ..., description='CEParticipation status end date'
    )


class CEParticipationSummaryResponse(BaseModel):
    query: Optional[Dict[str, Any]] = None
    result: Optional[List[CEParticipationSummary]] = None
    total: Optional[int] = None


class Name(BaseModel):
    FirstName: Optional[constr(max_length=50)] = Field(
        None, description='First name of the client'
    )
    MiddleName: Optional[constr(max_length=50)] = Field(
        None, description='Middle name of the client'
    )
    LastName: Optional[constr(max_length=50)] = Field(
        None, description='Last name of the client'
    )
    NameSuffix: Optional[constr(max_length=50)] = Field(
        None, description="Suffix of the client's name"
    )
    NameDataQuality: Optional[NameDataQuality] = None


class SSN(BaseModel):
    SocialSecurityNumber: Optional[constr(pattern=r'^[0-9xX]{9}$|^[0-9]{3}-[0-9]{2}-[0-9]{4}$')] = Field(
        None, description="Social Security Number, potentially masked with 'x'"
    )
    SocialSecurityNumberDataQuality: Optional[SocialSecurityNumberDataQuality] = None


class VitalStatistics(BaseModel):
    DateOfBirth: Optional[date] = Field(None, description='Date of birth of the client')
    DateOfBirthDataQuality: Optional[DateOfBirthDataQuality] = None


class RaceAndEthnicity(BaseModel):
    AmIndAkNative: Optional[NoYes] = None
    Asian: Optional[NoYes] = None
    BlackAfAmerican: Optional[NoYes] = None
    HispanicLatinaeo: Optional[NoYes] = None
    MidEastNAfrican: Optional[NoYes] = None
    NativeHiPacific: Optional[NoYes] = None
    White: Optional[NoYes] = None
    RaceNone: Optional[RaceGenderNone] = Field(
        None, description='non-null only if all other race fields are 0 (UNKNOWN)'
    )
    AdditionalRaceEthnicity: Optional[constr(max_length=100)] = None


class Gender(BaseModel):
    Woman: Optional[NoYes] = None
    Man: Optional[NoYes] = None
    NonBinary: Optional[NoYes] = None
    CulturallySpecific: Optional[NoYes] = None
    Transgender: Optional[NoYes] = None
    Questioning: Optional[NoYes] = None
    DifferentIdentity: Optional[NoYes] = None
    GenderNone: Optional[RaceGenderNone] = Field(
        None, description='Non-null only if all other gender fields = 0'
    )
    DifferentIdentityText: Optional[constr(max_length=100)] = None


class Veteran(BaseModel):
    VeteranStatus: Optional[NoYesReasonsForMissingData] = None
    YearEnteredService: Optional[
        constr(pattern=r'^(19[2-8][0-9]|199[0-9]|20[01][0-9]|202[0-4])$')
    ] = None
    YearSeparated: Optional[
        constr(pattern=r'^(19[2-8][0-9]|199[0-9]|20[01][0-9]|202[0-4])$')
    ] = None
    WorldWarII: Optional[NoYesReasonsForMissingData] = None
    KoreanWar: Optional[NoYesReasonsForMissingData] = None
    VietnamWar: Optional[NoYesReasonsForMissingData] = None
    DesertStorm: Optional[NoYesReasonsForMissingData] = None
    AfghanistanOEF: Optional[NoYesReasonsForMissingData] = None
    IraqOIF: Optional[NoYesReasonsForMissingData] = None
    IraqOND: Optional[NoYesReasonsForMissingData] = None
    OtherTheater: Optional[NoYesReasonsForMissingData] = None
    MilitaryBranch: Optional[MilitaryBranch] = None
    DischargeStatus: Optional[DischargeStatus] = None


class ClientBase(BaseModel):
    name: Optional[Name] = None
    ssn: Optional[SSN] = None
    vitalStatistics: Optional[VitalStatistics] = None
    raceAndEthnicity: Optional[RaceAndEthnicity] = None
    gender: Optional[Gender] = None
    veteran: Optional[Veteran] = None
    # UserId: Optional[constr(max_length=32)] = None


class Client(ClientBase):
    PersonalID: Optional[constr(max_length=32)] = Field(
        None, description='Unique identifier for the client'
    )
    DateCreated: Optional[AwareDatetime] = None
    DateUpdated: Optional[AwareDatetime] = None
    DateDeleted: Optional[AwareDatetime] = None


class EnrollmentBase(BaseModel):
    EnrollmentID: Optional[constr(max_length=32)] = None
    PersonalID: Optional[constr(max_length=32)] = None
    ProjectID: Optional[constr(max_length=32)] = None
    EntryDate: Optional[date] = None
    HouseholdID: Optional[constr(max_length=32)] = None
    RelationshipToHoH: Optional[RelationshipToHoH] = None
    EnrollmentCoC: Optional[constr(pattern=r'^[A-Za-z]{2}-[0-9]{3}$', max_length=6)] = (
        None
    )
    livingSituation: Optional[LivingSituation] = None
    DateOfEngagement: Optional[date] = None
    MoveInDate: Optional[date] = None
    DateOfPATHStatus: Optional[date] = None
    PercentAMI: Optional[PercentAMI] = None
    VAMCStation: Optional[VAMCStationNumber] = None
    targetScreenReqd: Optional[NoYes] = None
    rentalSubsidyType: Optional[RentalSubsidyTypes] = None
    lengthOfStay: Optional[LengthOfStay] = None
    LOSUnderThreshold: Optional[NoYes] = None
    PreviousStreetESSH: Optional[NoYes] = None
    DateToStreetESSH: Optional[date] = None
    timesHomelessPastThreeYears: Optional[TimesHomelessPastThreeYears] = None
    monthsHomelessPastThreeYears: Optional[MonthsHomelessPastThreeYears] = None
    disablingCondition: Optional[NoYesReasonsForMissingData] = None
    ClientEnrolledInPATH: Optional[NoYes] = None
    reasonNotEnrolled: Optional[ReasonNotEnrolled] = None
    referralSource: Optional[ReferralSource] = None
    EligibleForRHY: Optional[NoYes] = None
    reasonNoServices: Optional[ReasonNoServices] = None
    runawayYouth: Optional[NoYesReasonsForMissingData] = None
    sexualOrientation: Optional[SexualOrientation] = None
    FormerWardChildWelfare: Optional[NoYesReasonsForMissingData] = None
    ChildWelfareYears: Optional[RHYNumberofYears] = None
    ChildWelfareMonths: Optional[conint(ge=1, le=11)] = None
    FormerWardJuvenileJustice: Optional[NoYesReasonsForMissingData] = None
    JuvenileJusticeYears: Optional[RHYNumberofYears] = None
    JuvenileJusticeMonths: Optional[conint(ge=1, le=11)] = None
    UnemploymentFam: Optional[NoYes] = None
    MentalHealthDisorderFam: Optional[NoYes] = None
    PhysicalDisabilityFam: Optional[NoYes] = None
    AlcoholDrugUseDisorderFam: Optional[NoYes] = None
    InsufficientIncome: Optional[NoYes] = None
    IncarceratedParent: Optional[NoYes] = None
    SSVF_HP_Targeting_Criteria: Optional[int] = None
    timeToHousingLoss: Optional[TimeToHousingLoss] = None
    annualPercentAMI: Optional[AnnualPercentAMI] = None
    literalHomelessHistory: Optional[LiteralHomelessHistory] = None
    ClientLeaseholder: Optional[NoYes] = None
    HOHLeaseholder: Optional[NoYes] = None
    SubsidyAtRisk: Optional[NoYes] = None
    evictionHistory: Optional[EvictionHistory] = None
    CriminalRecord: Optional[NoYes] = None
    incarceratedAdult: Optional[IncarceratedAdult] = None
    prisonDischarge: Optional[NoYes] = None
    sexOffender: Optional[NoYes] = None
    DisableHoH: Optional[NoYes] = None
    currentPregnant: Optional[NoYes] = None
    SingleParent: Optional[NoYes] = None
    DependentUnder6: Optional[DependentUnder6] = None
    HH5Plus: Optional[NoYes] = None
    coCPrioritized: Optional[NoYes] = None
    HPScreeningScore: Optional[int] = None
    ThresholdScore: Optional[int] = None
    TranslationNeeded: Optional[NoYesReasonsForMissingData] = None
    preferredLanguage: Optional[int] = None
    preferredLanguageDifferent: Optional[constr(max_length=100)] = None


class Enrollment(EnrollmentBase):
    EnrollmentID: constr(max_length=32) = Field(
        ..., description='Unique identifier for the enrollment record'
    )
    DateCreated: Optional[AwareDatetime] = None
    DateUpdated: Optional[AwareDatetime] = None
    DateDeleted: Optional[AwareDatetime] = None


class ExitBase(BaseModel):
    ExitID: Optional[constr(max_length=32)] = Field(
        None, description='Unique identifier'
    )
    EnrollmentID: Optional[constr(max_length=32)] = Field(
        None, description='Enrollment Id'
    )
    PersonalID: Optional[constr(max_length=32)] = Field(None, description='Personal Id')
    ExitDate: Optional[date] = Field(None, description='Exit date')
    Destination: Optional[LivingSituation] = Field(None, description='Destination')
    DestinationSubsidyType: Optional[RentalSubsidyTypes] = Field(
        None, description='Destination subsidy type'
    )
    OtherDestination: Optional[constr(max_length=50)] = Field(
        None, description='Other destination'
    )
    HousingAssessment: Optional[HousingAssessmentAtExit] = Field(
        None, description='Housing assessment at exit'
    )
    subsidyInformation: Optional[SubsidyInformation] = Field(
        None, description='Includes data for W5.A and W5.B.'
    )
    projectCompletionStatus: Optional[ProjectCompletionStatus] = Field(
        None, description='Project completion status'
    )
    EarlyExitReason: Optional[ExpelledReason] = Field(
        None, description='Expelled reason'
    )
    ExchangeForSex: Optional[NoYesReasonsForMissingData] = Field(
        None, description='Exchange for sex'
    )
    ExchangeForSexPastThreeMonths: Optional[NoYesReasonsForMissingData] = Field(
        None, description='Exchange for sex past three months'
    )
    countOfExchangeForSex: Optional[CountExchangeForSex] = Field(
        None, description='Count of exchange for sex'
    )
    AskedOrForcedToExchangeForSex: Optional[NoYesReasonsForMissingData] = Field(
        None, description='Asked or forced to exchange for sex'
    )
    AskedOrForcedToExchangeForSexPastThreeMonths: Optional[
        NoYesReasonsForMissingData
    ] = Field(None, description='Asked or forced to exchange for sex past three months')
    WorkplaceViolenceThreats: Optional[NoYesReasonsForMissingData] = Field(
        None, description='Workplace violence threats'
    )
    WorkplacePromiseDifference: Optional[NoYesReasonsForMissingData] = Field(
        None, description='Workplace promise difference'
    )
    CoercedToContinueWork: Optional[NoYesReasonsForMissingData] = Field(
        None, description='Coerced to continue work'
    )
    LaborExploitPastThreeMonths: Optional[NoYesReasonsForMissingData] = Field(
        None, description='Labor exploit past three months'
    )
    CounselingReceived: Optional[NoYesMissing] = Field(
        None, description='Counseling received'
    )
    IndividualCounseling: Optional[NoYesMissing] = Field(
        None, description='Individual counseling'
    )
    FamilyCounseling: Optional[NoYesMissing] = Field(
        None, description='Family counseling'
    )
    GroupCounseling: Optional[NoYesMissing] = Field(
        None, description='Group counseling'
    )
    SessionCountAtExit: Optional[int] = Field(None, description='Session count at exit')
    PostExitCounselingPlan: Optional[NoYesMissing] = Field(
        None, description='Post exit counseling plan'
    )
    SessionsInPlan: Optional[int] = Field(None, description='Sessions in plan')
    DestinationSafeClient: Optional[NoYesReasonsForMissingData] = Field(
        None, description='Destination safe for client'
    )
    DestinationSafeWorker: Optional[WorkerResponse] = Field(
        None, description='Destination safe for worker'
    )
    PosAdultConnections: Optional[WorkerResponse] = Field(
        None, description='Positive adult connections'
    )
    PosPeerConnections: Optional[WorkerResponse] = Field(
        None, description='Positive peer connections'
    )
    PosCommunityConnections: Optional[WorkerResponse] = Field(
        None, description='Positive community connections'
    )
    AftercareDate: Optional[date] = Field(None, description='Aftercare date')
    aftercareProvided: Optional[AftercareProvided] = Field(
        None, description='Aftercare provided'
    )
    EmailSocialMedia: Optional[NoYesMissing] = Field(
        None, description='Email or social media contact'
    )
    Telephone: Optional[NoYesMissing] = Field(None, description='Telephone contact')
    InPersonIndividual: Optional[NoYesMissing] = Field(
        None, description='In-person individual contact'
    )
    inPersonGroup: Optional[NoYesMissing] = Field(
        None, description='In-person group contact'
    )
    cmExitReason: Optional[CMExitReason] = Field(
        None, description='Case management exit reason'
    )


class Exit(ExitBase):
    ExitID: Optional[constr(max_length=32)] = Field(
        None, description='Unique identifier'
    )
    EnrollmentID: Optional[constr(max_length=32)] = Field(
        None, description='Enrollment Id'
    )
    DateCreated: Optional[AwareDatetime] = Field(None, description='Date created')
    DateUpdated: Optional[AwareDatetime] = Field(None, description='Date updated')
    UserId: Optional[constr(max_length=32)] = Field(None, description='User ID')
    DateDeleted: Optional[AwareDatetime] = Field(None, description='Date deleted')


class FunderBase(BaseModel):
    FunderId: Optional[constr(max_length=32)] = Field(
        None, description='Unique identifier'
    )
    ProjectID: Optional[constr(max_length=32)] = Field(
        None, description='Must match a record in Project'
    )
    fundingSource: Optional[FundingSource] = Field(
        None, description='Funding source identifier'
    )
    OtherFunder: Optional[constr(max_length=100)] = Field(
        None, description='Required if FundingSource = 46'
    )
    GrantID: Optional[constr(max_length=100)] = Field(
        None, description='Grant identifier'
    )
    StartDate: Optional[date] = Field(None, description='Start date')
    EndDate: Optional[date] = Field(None, description='End date')
    UserId: Optional[constr(max_length=32)] = Field(None, description='User ID')


class Funder(FunderBase):
    FunderId: Optional[constr(max_length=32)] = Field(
        None, description='Unique identifier'
    )
    DateCreated: Optional[AwareDatetime] = Field(None, description='Date created')
    DateUpdated: Optional[AwareDatetime] = Field(None, description='Date updated')
    DateDeleted: Optional[AwareDatetime] = Field(None, description='Date deleted')


class FunderSummary(BaseModel):
    FunderId: Optional[constr(max_length=32)] = Field(
        None, description='Unique identifier'
    )
    fundingSource: Optional[FundingSource] = Field(
        None, description='Funding source identifier'
    )
    OtherFunder: Optional[constr(max_length=100)] = Field(
        None, description='Required if FundingSource = 46'
    )
    ProjectID: Optional[constr(max_length=32)] = Field(
        None, description='Must match a record in Project'
    )
    EnrollmentID: Optional[constr(max_length=32)] = Field(
        None, description='Unique identifier for an enrollment'
    )
    PersonalID: Optional[constr(max_length=32)] = Field(
        None, description='Unique identifier for the client'
    )


class FunderSummaryResponse(BaseModel):
    query: Optional[Dict[str, Any]] = None
    result: Optional[List[FunderSummary]] = None
    total: Optional[int] = None


class OrganizationBase(BaseModel):
    OrganizationID: constr(max_length=32)
    OrganizationName: Optional[constr(max_length=200)] = None
    VictimServiceProvider: Optional[NoYes] = Field(
        None,
        description='Indicates whether the organization is a victim service provider (1=yes, 0=no)',
    )
    OrganizationCommonName: Optional[constr(max_length=200)] = None
    UserId: Optional[constr(max_length=32)] = None


class Organization(OrganizationBase):
    DateCreated: Optional[AwareDatetime] = None
    DateUpdated: Optional[AwareDatetime] = None
    DateDeleted: Optional[AwareDatetime] = None


class ProjectBase(BaseModel):
    ProjectID: constr(max_length=32)
    OrganizationID: Optional[constr(max_length=32)] = None
    ProjectName: Optional[constr(max_length=200)] = None
    ProjectCommonName: Optional[constr(max_length=200)] = None
    OperatingStartDate: Optional[date] = None
    OperatingEndDate: Optional[date] = None
    ContinuumProject: Optional[NoYes] = None
    projectType: Optional[ProjectType] = None
    housingType: Optional[HousingType] = None
    rrhSubType: Optional[RRHSubType] = None
    residentialAffiliation: Optional[NoYes] = None
    targetPopulation: Optional[TargetPopulation] = None
    HOPWAMedAssistedLivingFac: Optional[HOPWAMedAssistedLivingFacNum] = None
    PITCount: Optional[int] = None


class Project(ProjectBase):
    ProjectID: constr(max_length=32)
    DateCreated: Optional[AwareDatetime] = None
    DateUpdated: Optional[AwareDatetime] = None
    UserId: Optional[constr(max_length=32)] = None
    DateDeleted: Optional[AwareDatetime] = None


class CeparticipationsummaryProjectIDGetResponse(
    CEParticipationSummaryResponse, PaginatedList
):
    pass


class FundersummaryFunderIDGetResponse(FunderSummaryResponse, PaginatedList):
    pass
